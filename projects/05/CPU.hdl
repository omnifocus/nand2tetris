// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	//c:control bit 
	//d:data
	Not(in=instruction[15],out=c1);
	Mux16(a=da,b=instruction,sel=c1,out=d1);
	//load的时候意思是 load不load本次ALU计算完成传给A的值，c指令且第5位是1 , A指令在前一个c已经决定了将ALU计算的值抛弃
	And(a=instruction[15],b=instruction[5],out=c2);
	Or(a=c1,b=c2,out=c3);	
	//A
	ARegister(in=d1,load=c3,out=d2,out[0..14]=addressM);

	//判断load M 还是 A
	//c指令且第12位是1是M，0是A
	And(a=instruction[15],b=instruction[12],out=c4);
	Mux16(a=d2,b=inM,sel=c4,out=d3);


	ALU(x=ddd,y=d3,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],zr=c11,ng=c12,out=da,out=dd,out=dm,out=outM);

//	确保只有c指令才生效
	And(a=instruction[15],b=instruction[4],out=c98);	
	And(a=instruction[15],b=instruction[3],out=writeM);	

	//D
	DRegister(in=dd,load=c98,out=ddd);

		
	//c指令且jmp时，load=1；否则就++
	And(a=instruction[15],b=instruction[2],out=c13);
	And(a=instruction[15],b=instruction[1],out=c14);
	And(a=instruction[15],b=instruction[0],out=c15);
	// <0
	And(a=c12,b=c13,out=c16);
	// =0
	And(a=c11,b=c14,out=c17);
	
	Not(in=c11,out=c18);
	Not(in=c12,out=c19);
	And(a=c18, b=c19,out=c20);
	// >0
	And(a=c20,b=c15,out=c21);
	
	Or(a=c16,b=c17,out=ct);
	Or(a=ct,b=c21,out=c100);

	Not(in=c100,out=c22);	
	PC(in=d2,load=c100,inc=c22,reset=reset,out[0..14]=pc);
	
		

	
	
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
	Mux16(a=x,b=false,sel=zx,out=zxv);
	Not16(in=zxv,out=nx1);
	Mux16(a=zxv,b=nx1,sel=nx,out=nxv);
	Mux16(a=y,b=false,sel=zy,out=zyv);
	Not16(in=zyv,out=ny1);
	Mux16(a=zyv,b=ny1,sel=ny,out=nyv);
	Add16(a=nxv,b=nyv,out=f1);
	And16(a=nxv,b=nyv,out=f0);
	Mux16(a=f0,b=f1,sel=f,out=fv);
	Not16(in=fv,out=no1);
	Mux16(a=fv,b=no1,sel=no,out=out,out[15]=lms,out[0..7]=or1,out[8..15]=or2);
	//判断是否为0
	Or8Way(in=or1,out=zrv1);
	Or8Way(in=or2,out=zrv2);
	Or(a=zrv1,b=zrv2,out=zrv);
	Mux(a=true,b=false,sel=zrv,out=zr,out=zrt);

	// zrt做为sel定死了如果是0，那么ng必为0 
	//否则将由lms指定	
	Mux(a=lms,b=false,sel=zrt,out=ng);		
	
	
}	
